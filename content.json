{"meta":{"title":"潘先生的个人博客","subtitle":"","description":"","author":"Mr Pan","url":"http://example.com","root":"/"},"pages":[{"title":"tags","date":"2023-03-12T15:32:24.000Z","updated":"2023-03-12T15:34:09.803Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2023-03-12T15:32:16.000Z","updated":"2023-03-12T15:57:38.719Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Vue3项目构建的基本配置","slug":"2023.3.12","date":"2023-03-12T08:59:45.000Z","updated":"2023-03-12T16:16:27.195Z","comments":true,"path":"2023/03/12/2023.3.12/","link":"","permalink":"http://example.com/2023/03/12/2023.3.12/","excerpt":"Vue3项目构建的基本配置:Prettier + Eslint 代码格式化工具editorconfig统一开发格式可以去github上搜寻.editorconfig统一格式，然后在自己的项目中新建.editorconfig文件，并配置相关代码","text":"Vue3项目构建的基本配置:Prettier + Eslint 代码格式化工具editorconfig统一开发格式可以去github上搜寻.editorconfig统一格式，然后在自己的项目中新建.editorconfig文件，并配置相关代码 [*.&#123;js,jsx,ts,tsx,vue&#125;] indent_style = space indent_size = 2 trim_trailing_whitespace = true insert_final_newline = true # https://editorconfig.org root = true [*] charset = utf-8 indent_style = space # 缩进风格(tab | space) indent_size = 2 # 缩进大小 end_of_line = lf # 控制换行类型(if | cr | crlf) insert_final_newline = true # 去除行首的任意空白字符 trim_trailing_whitespace = true # 始终在文件末尾插入一个新行 [*.md] insert_final_newline = z trim_trailing_whitespace = false 开发时依赖 代码格式化工具 prettier1.安装 prettier 和 eslint 并且将他们两个兼容起来2.安装prettiernpm install prettier -D3.新建.prettierrc文件来配置文件 &#123; &quot;useTabs&quot;: false, &quot;tabWidth&quot;: 2, &quot;printWidth&quot;: 80, &quot;singleQuote&quot;: false, &quot;trailingComma&quot;: &quot;none&quot;, &quot;semi&quot;: true &#125; 4.新建.prettierignore文件来忽视不需要代码格式化的文件 /dist/* .local .output.js /node_modules/** **/*.svg **/*.sh /public/* 4.如果使vscode请安装&emsp;&emsp;如果直接使用的话，prettier和eslint会有冲突，我们可以安装另外两个来使他们兼容，并且按照prettier的代码格式。npm install eslint-plugin-prettier -Dnpm install eslint-config-prettier -D5.并且在.eslintrc.js的文件里的extends属性里最后一行添加配置，这样就能覆盖掉前面的配置，并且能够兼容prettier的代码格式 extends: [ &quot;plugin:prettier/recommended&quot; ], Commitizen是一个帮助我们编写规范commit message的工具1.安装Commitizennpm i commitizen -D2.安装cz-conventional-changelog并且初始化cz-conventional-changelog:npx commitizen init cz-conventional-changelog --save-dev --save-exact会自动在pack.json文件中配置全局安装使用 npx cz 来代替 git commit 代码提交验证1.commitlint: 安装，制定提交规范（采用默认）npm install --save-dev @commitlint/config-conventional @commitlint/cli2.新建commit.config.js并配置 module.exports = &#123; extends: [&#39;@commitlint/config-conventional&#39;] &#125; 3.使用huskynpx husky add .husky/commit-msg &quot;npx --no-install commitlint --edit $1&quot; vue.config.js 基本配置vue.config.js 是vue-cli的配置文件，而vue-cli是有webpack构建所以可以进行相关的配置1.配置方式一 outputDir:&#39;./build&#39;, configureWebpack: &#123; resolve: &#123; alias: &#123; components: &#39;@/component&#39;, &#125; &#125; &#125; 2.配置方式二 configureWebpack: (config) =&gt; &#123; config.resolve.alias = &#123; &#39;@&#39;:path.resolve(__dirname,&#39;src&#39;), components:&#39;@/components&#39; &#125; }","categories":[{"name":"Vue3","slug":"Vue3","permalink":"http://example.com/categories/Vue3/"}],"tags":[{"name":"Vue3","slug":"Vue3","permalink":"http://example.com/tags/Vue3/"}]},{"title":"js数据结构","slug":"js的数据结构","date":"2023-03-12T07:59:45.000Z","updated":"2023-03-12T16:16:40.577Z","comments":true,"path":"2023/03/12/js的数据结构/","link":"","permalink":"http://example.com/2023/03/12/js%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","excerpt":"js数据结构栈后进先出 队列I先进先出 链表但不同于数，链表中的元素在内存中不必是连续的空间链表的每个元素有一个存储元素的本身的节点和一个指向下一个元素的引用组成有点 内幕才能空间不是必须连续的，可以充分利用计算机的内存，实现灵活额的内存动态管理链表不必在创建时就确定大小，并且大小可以无限的眼神下去链表在插入和删除数据是，时间复杂度可以达到 ，相对数组效率高很多缺点需要从头开始访问","text":"js数据结构栈后进先出 队列I先进先出 链表但不同于数，链表中的元素在内存中不必是连续的空间链表的每个元素有一个存储元素的本身的节点和一个指向下一个元素的引用组成有点 内幕才能空间不是必须连续的，可以充分利用计算机的内存，实现灵活额的内存动态管理链表不必在创建时就确定大小，并且大小可以无限的眼神下去链表在插入和删除数据是，时间复杂度可以达到 ，相对数组效率高很多缺点需要从头开始访问 算法的复杂度分析。排序算法，以及他们的区别和优化。数组中的双指针、滑动窗口思想。利用 Map 和 Set 处理查找表问题。链表的各种问题。利用递归和迭代法解决二叉树问题。栈、队列、DFS、BFS。回溯法、贪心算法、动态规划 链表的数组反转 var reverseList = function (head) { let p1 = head let p2 =null while(p1){ console.log(p2 &amp;&amp;p2.val,p1&amp;&amp;p1.val); p2=p1; p1=p1.next } }; console.log(reverseList( [1,2,3,4,5])); 俩数相加###","categories":[{"name":"js数据结构","slug":"js数据结构","permalink":"http://example.com/categories/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"js数据结构","slug":"js数据结构","permalink":"http://example.com/tags/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]}],"categories":[{"name":"Vue3","slug":"Vue3","permalink":"http://example.com/categories/Vue3/"},{"name":"js数据结构","slug":"js数据结构","permalink":"http://example.com/categories/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"Vue3","slug":"Vue3","permalink":"http://example.com/tags/Vue3/"},{"name":"js数据结构","slug":"js数据结构","permalink":"http://example.com/tags/js%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]}